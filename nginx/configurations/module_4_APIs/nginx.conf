# nginx.conf 

user nginx;



# nginx has to record the process identifier (PID).  This file gets
# modified all the time, but if it gets corrupted, then you will have
# to stop nginx "by hand" using the kill or killall commands.
pid /run/nginx.pid;

# These configuration files pull in any additional modules not in the
# static build and also configuration information about those modules.
include /etc/nginx/modules-enabled/*.conf;

events {
	# IMPORTANT POINT: This is an **optimization**.  Get your server
	# working first, measure its performance, and then start optimizing!
# See  https://nginx.org/en/docs/ngx_core_module.html#worker_processes
	worker_connections 38;
	
	# http://serverfault.com/questions/763597/ddg#763887 has a good answer
	# as to why this shold be off
	multi_accept off;
}

http {
	##
	# Logging Settings
	##

	# This is the format I want for my access log file.  If I was in a national or
	# international corporation, I'd probably change $time_local to GMT by setting
	# the TZ envar to UTC in the script or Dockerfile used to start nginx
	# $remote_user user name supplied with the Basic authentication
	# Find a list of variables for use in the log @ https://freenginx.org/en/docs/varindex.html
	# $request_filename is the file path for the current request, based on the root or alias directives, and the request URI.  Useful for troubleshooting 404 errors.
	log_format  main  $remote_addr [$time_iso8601]  $status $request ||  $uri $request_filename;

	access_log /var/log/nginx/access.log	main;
	error_log /var/log/nginx/error.log	debug;		# This is too verbose for production, set to error or warn



	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;		# Default mime types - do not modify!
	include /etc/nginx/my_mime.types;	# My mime types.  Since I have a lot of python, TSV, CSV and CONF files, I want them rendered as text
	default_type application/octet-stream;	# If nginx cannot figure out what the file type is, delegate to the client

	##
	# SSL Settings
	##

	# This is redundant with etc/letsencrypt/options-ssl-nginx.conf which might generate a warning
	# ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	# ssl_prefer_server_ciphers is also in /etc/letsencrypt/options-ssl-nginx.conf
        # ssl_prefer_server_ciphers on;


	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	# root /var/www
	# Static content goes in /var/www/html
	# Flask URLs go to /var/www/flask
	# etc

	# For now, lets just keep it somple, and put all of the directives here.
	# We can make it more complicated later.
	# include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;
	server {
		listen 80;
		server_name _;	# A wild card server name.  Suitable for development, not good for produections

		location / {
			## root /var/www/wsgi;		# Not sure why this is needed, because nginx is going to route to a server/port combo using TCP.  It does not reference the file system at all.
        		proxy_pass http://localhost:5000; # Assuming Flask app is running on localhost:5000
        		#
        		# I looked at https://stackoverflow.com/questions/42589781/django-nginx-emerg-open-etc-nginx-proxy-params-failed-2-no-such-file#42591098
        		# include /etc/nginx/proxy_params;	# and the /etc/nginx/proxy_params file contain the 4 proxy_set_header directives below.
			# Document what these 4 directives do.
			proxy_set_header Host $host;
	        	proxy_set_header X-Real-IP $remote_addr;
	        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	        	proxy_set_header X-Forwarded-Proto $scheme;

        		proxy_redirect off;	# See https://freenginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect for details.

	        }

	# Each TCP connection has control block maintained by the kernel.  Kernel memory
	# is a precious resource.  This setting sets a timer.  When the timer expires,
	# the TCP connection is closed on the server side.
	# https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
	keepalive_timeout  65;

	error_page  404              /404.html;
	error_page   500 502 503 504  /50x.html;
	}
}

    

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##
# From To configure an HTTPS server, the ssl parameter must be enabled on listening sockets in the server block, and the locations of the server certificate and private key files should be specified:

server {
    server_name jeffsilverm.ddns.net ; # managed by Certbot
# Can the listen directives go in the common.conf file?
    listen 443 ssl ;
    listen [::]:443 ssl  ipv6only=on;
    ssl_certificate /etc/letsencrypt/live/jeffsilverm.ddns.net-0002/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/jeffsilverm.ddns.net-0002/privkey.pem; # managed by Certbot
# For reasons I do not understand, I can't put the location directive in an included file  :-(
    location / {
	# First attempt to serve request as file, then
	# as directory, then fall back to displaying a 404.
	# https://nginx.org/en/docs/http/ngx_http_core_module.html#try_files
	# try_files $uri $uri/ =404;
        # https://nginx.org/en/docs/http/ngx_http_index_module.html#index
        # index  index.html index.htm;	# delegated to the common.conf file

    # If there is a directory which does not have an index file, then
    # generate an index automatically (alternativce is a 404 error)
        autoindex on;
	root /var/www/html/;
    }
    include sites-enabled/common.conf;

}

server {
    server_name jeffsilverman.ddns.net; 
    listen 443  ssl ;
    listen [::]:443  ssl ;
    ssl_certificate /etc/letsencrypt/live/jeffsilverman-aaaa.ddns.net-0002/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/jeffsilverman-aaaa.ddns.net-0002/privkey.pem; # managed by Certbot
    location / {
        autoindex on;
	root /var/www/html/;
    }
    include sites-enabled/common.conf;


}

server {
    server_name jeffsilverman-aaaa.ddns.net ;
    listen 443 ssl  ;
    listen [::]:443  ssl ;
    ssl_certificate /etc/letsencrypt/live/jeffsilverman-aaaa.ddns.net-0002/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/jeffsilverman-aaaa.ddns.net-0002/privkey.pem; # managed by Certbot
    location / {
        autoindex on;
	root /var/www/html/;
    }
    include sites-enabled/common.conf;


}


server {
    #. Feb 29 2024, I decided that the rewrite 301 directives might be getting in the way of the wsgi
    #. This might break the certbot.
    #. if ($host = jeffsilverman-aaaa.ddns.net) {
    #.    return 301 https://$host$request_uri;
    #.} # managed by Certbot


    #.if ($host = jeffsilverman.ddns.net) {
    #.    return 301 https://$host$request_uri;
    #.} # managed by Certbot


    #.if ($host = jeffsilverm.ddns.net) {
    #.    return 301 https://$host$request_uri;
    #.} # managed by Certbot


    listen 80 ;
    listen [::]:80 ;
    server_name jeffsilverm.ddns.net jeffsilverman.ddns.net jeffsilverman-aaaa.ddns.net;
    #. return 301 https://$host$request_uri  ; # managed by Certbot
    location / {
    	root /var/www/html;
    }

    location /html {
    	root /var/www/html;
    }



    location /wsgi {
          # For more documentation, see https://freenginx.org/en/docs/http/ngx_http_uwsgi_module.html (new, open source)
          # https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html (old, commercialized)
        include /etc/nginx/uwsgi_params;
        uwsgi_pass 127.0.0.1:8000;		# This uses TCP sockets
#. uwsgi protocol magic variables https://uwsgi-docs.readthedocs.io/en/latest/Vars.html
#.  https://uwsgi-docs.readthedocs.io/en/latest/PSGIquickstart.html Quickstart for perl/PSGI applications
# Since I am not writing for perl, psgi is commented out.
#            uwsgi_param LLTYPE psgi;
#            uwsgi_param SCRIPT_FILENAME	/etc/nginx/sites/uwsgi_params.conf;	# absolute path
#            uwsgi_param SCRIPT_NAME    	uwsgi_params.conf;# path relative to nginx.conf
          }

    location /fastcgi {
       return 500  "fastcgi is not implemented yet";
    }

    location /cgi {
       return 500 "cgo-bin is not implemented yet";
    }
}
